
package com.mycompany.undirectedgraph;

import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Graphics2D;
import java.awt.Toolkit;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import javax.imageio.ImageIO;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileNameExtensionFilter;

/**
 *
 * @author ce171000 Le Quoc Vuong
 */
public class Undirected_Graph extends javax.swing.JFrame {

    private GPaper p = null;
    JFileChooser fileChooser;
    SimpleDateFormat sdfDate = new SimpleDateFormat("yyyyMMdd_HHmmss");

    public Undirected_Graph() {
        initComponents();

        //set icon for JFrame
//        this.setIconImage(Toolkit.getDefaultToolkit().getImage(getClass().getResource("/images/graph-icon.png")));
        //set center & set can not change resize
        this.setResizable(false);
        this.setLocationRelativeTo(null);

        p = new GPaper();
        p.setTxtGraphInfo(txtGraphInfo);
        pnlPaper.setLayout(new BorderLayout());
        pnlPaper.add(p, BorderLayout.CENTER);

        fileChooser = new JFileChooser();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btgGraphType = new javax.swing.ButtonGroup();
        lblGuideLine = new javax.swing.JLabel();
        pnlGraphInfo = new javax.swing.JPanel();
        rdbMatrix = new javax.swing.JRadioButton();
        rbdList = new javax.swing.JRadioButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtGraphInfo = new javax.swing.JTextArea();
        pnlPaper = new javax.swing.JPanel();
        mnuMain = new javax.swing.JMenuBar();
        mnuFile = new javax.swing.JMenu();
        mniOpen = new javax.swing.JMenuItem();
        mnuSaveAs = new javax.swing.JMenu();
        mniSaveMatrix = new javax.swing.JMenuItem();
        mniSaveList = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JPopupMenu.Separator();
        mniExit = new javax.swing.JMenuItem();
        mnuGraph = new javax.swing.JMenu();
        mniClear = new javax.swing.JMenuItem();
        mniExport = new javax.swing.JMenuItem();
        mnuAlgorithm = new javax.swing.JMenu();
        mniFindShortestPath = new javax.swing.JMenuItem();
        mniMinimumSpanningTree = new javax.swing.JMenuItem();
        mnuTraversing = new javax.swing.JMenu();
        mniBFS = new javax.swing.JMenuItem();
        mniDFS = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Undirected Graph");

        lblGuideLine.setText("<html>##### Draws vertices #####<br/>#1. Hold ctrl and click on space<br/>&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;to add new vertex.<br/>#2. Hold shift and click on the vertex that you <br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;want to remove.<br/> #3. Drag and drop a vertex to move it.<br/><br/>##### Draws edges #####c<hr/>#1. Select start vertex <br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (click it again to unselect).<br/>#2. Select destination vertex.<br/>#3. Input edge's value.<br/>#4. Click on value of the exist edge to update.</html:  ");

        pnlGraphInfo.setBorder(javax.swing.BorderFactory.createTitledBorder("Graph Information"));

        btgGraphType.add(rdbMatrix);
        rdbMatrix.setSelected(true);
        rdbMatrix.setText("Matrix");
        rdbMatrix.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rdbMatrixActionPerformed(evt);
            }
        });

        btgGraphType.add(rbdList);
        rbdList.setText("List");
        rbdList.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbdListActionPerformed(evt);
            }
        });

        txtGraphInfo.setEditable(false);
        txtGraphInfo.setColumns(20);
        txtGraphInfo.setRows(10);
        jScrollPane1.setViewportView(txtGraphInfo);

        javax.swing.GroupLayout pnlGraphInfoLayout = new javax.swing.GroupLayout(pnlGraphInfo);
        pnlGraphInfo.setLayout(pnlGraphInfoLayout);
        pnlGraphInfoLayout.setHorizontalGroup(
            pnlGraphInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlGraphInfoLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlGraphInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addGroup(pnlGraphInfoLayout.createSequentialGroup()
                        .addComponent(rdbMatrix)
                        .addGap(18, 18, 18)
                        .addComponent(rbdList)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        pnlGraphInfoLayout.setVerticalGroup(
            pnlGraphInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlGraphInfoLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlGraphInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(rdbMatrix)
                    .addComponent(rbdList))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 234, Short.MAX_VALUE)
                .addContainerGap())
        );

        pnlPaper.setBorder(javax.swing.BorderFactory.createTitledBorder("Draw graph yourself"));

        javax.swing.GroupLayout pnlPaperLayout = new javax.swing.GroupLayout(pnlPaper);
        pnlPaper.setLayout(pnlPaperLayout);
        pnlPaperLayout.setHorizontalGroup(
            pnlPaperLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 679, Short.MAX_VALUE)
        );
        pnlPaperLayout.setVerticalGroup(
            pnlPaperLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        mnuFile.setMnemonic('F');
        mnuFile.setText("File");

        mniOpen.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_O, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        mniOpen.setMnemonic('O');
        mniOpen.setText("Open");
        mniOpen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mniOpenActionPerformed(evt);
            }
        });
        mnuFile.add(mniOpen);

        mnuSaveAs.setMnemonic('S');
        mnuSaveAs.setText("Save as...");

        mniSaveMatrix.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        mniSaveMatrix.setText("Matrix");
        mniSaveMatrix.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mniSaveMatrixActionPerformed(evt);
            }
        });
        mnuSaveAs.add(mniSaveMatrix);

        mniSaveList.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.SHIFT_DOWN_MASK | java.awt.event.InputEvent.CTRL_DOWN_MASK));
        mniSaveList.setText("List");
        mniSaveList.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mniSaveListActionPerformed(evt);
            }
        });
        mnuSaveAs.add(mniSaveList);

        mnuFile.add(mnuSaveAs);
        mnuFile.add(jSeparator1);

        mniExit.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F4, java.awt.event.InputEvent.ALT_DOWN_MASK));
        mniExit.setMnemonic('E');
        mniExit.setText("Exit");
        mniExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mniExitActionPerformed(evt);
            }
        });
        mnuFile.add(mniExit);

        mnuMain.add(mnuFile);

        mnuGraph.setMnemonic('G');
        mnuGraph.setText("Graph");

        mniClear.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_ESCAPE, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        mniClear.setMnemonic('C');
        mniClear.setText("Clear");
        mniClear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mniClearActionPerformed(evt);
            }
        });
        mnuGraph.add(mniClear);

        mniExport.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_E, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        mniExport.setMnemonic('E');
        mniExport.setText("ExportPNG");
        mniExport.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mniExportActionPerformed(evt);
            }
        });
        mnuGraph.add(mniExport);

        mnuMain.add(mnuGraph);

        mnuAlgorithm.setMnemonic('A');
        mnuAlgorithm.setText("Algorithm");

        mniFindShortestPath.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_H, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        mniFindShortestPath.setMnemonic('h');
        mniFindShortestPath.setText("Find shortest path");
        mniFindShortestPath.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mniFindShortestPathActionPerformed(evt);
            }
        });
        mnuAlgorithm.add(mniFindShortestPath);

        mniMinimumSpanningTree.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_M, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        mniMinimumSpanningTree.setMnemonic('m');
        mniMinimumSpanningTree.setText("Find minimum spanning tree");
        mniMinimumSpanningTree.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mniMinimumSpanningTreeActionPerformed(evt);
            }
        });
        mnuAlgorithm.add(mniMinimumSpanningTree);

        mnuTraversing.setMnemonic('T');
        mnuTraversing.setText("Traversing...");

        mniBFS.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_B, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        mniBFS.setText("BFS");
        mniBFS.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mniBFSActionPerformed(evt);
            }
        });
        mnuTraversing.add(mniBFS);

        mniDFS.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_D, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        mniDFS.setText("DFS");
        mniDFS.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mniDFSActionPerformed(evt);
            }
        });
        mnuTraversing.add(mniDFS);

        mnuAlgorithm.add(mnuTraversing);

        mnuMain.add(mnuAlgorithm);

        setJMenuBar(mnuMain);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(lblGuideLine)
                    .addComponent(pnlGraphInfo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(pnlPaper, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(lblGuideLine, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(pnlGraphInfo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(pnlPaper, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    public File getSaveFile(FileNameExtensionFilter filter, String filename) {
        fileChooser.setFileFilter(filter);
        fileChooser.setSelectedFile(new File(filename));
        if (fileChooser.showSaveDialog(this) == JFileChooser.APPROVE_OPTION) {
            if (fileChooser.getSelectedFile().exists()) {
                int response = JOptionPane.showConfirmDialog(null, "Do you wnat to replace the existing file?", "Confirm", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
                if (response != JOptionPane.YES_OPTION) {
                    return null;
                }
            }
            return fileChooser.getSelectedFile();
        }
        return null;
    }

    private void mniOpenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mniOpenActionPerformed
        fileChooser.setFileFilter(new FileNameExtensionFilter("Graph data (*.mtx, *.lst)", "mtx","lst"));
        if(fileChooser.showOpenDialog(this) == JFileChooser.APPROVE_OPTION){
            if(!fileChooser.getSelectedFile().exists()){
                return;
            }
            File openFile = fileChooser.getSelectedFile();
            if(openFile.getName().endsWith(".mtx")){
                p.readMatrixDataFile(openFile);
            }
            else if(openFile.getName().endsWith(".lst")){
                p.readListDataFile(openFile);
            }
        }
    }//GEN-LAST:event_mniOpenActionPerformed

    private void mniExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mniExitActionPerformed
        // TODO add your handling code here:
        System.exit(0);
        this.setVisible(false);
        this.dispose();
    }//GEN-LAST:event_mniExitActionPerformed

    private void mniClearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mniClearActionPerformed
        this.p.clear();
    }//GEN-LAST:event_mniClearActionPerformed

    private void mniMinimumSpanningTreeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mniMinimumSpanningTreeActionPerformed
        p.Prim();
    }//GEN-LAST:event_mniMinimumSpanningTreeActionPerformed

    private void mniDFSActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mniDFSActionPerformed
        p.DFS();
    }//GEN-LAST:event_mniDFSActionPerformed

    private void mniBFSActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mniBFSActionPerformed
        p.BFS();
    }//GEN-LAST:event_mniBFSActionPerformed

    private void mniExportActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mniExportActionPerformed
        File saveFile = getSaveFile(new FileNameExtensionFilter("PNG image (*png)", "png"), "export_" + sdfDate.format(Calendar.getInstance().getTime()) + ".png");

        if (saveFile != null) {
            BufferedImage image = new BufferedImage(p.getWidth(), p.getHeight(), BufferedImage.TYPE_INT_RGB);

            Graphics2D g = image.createGraphics();
            p.printAll(g);
            g.setColor(Color.red);
            g.drawString("Le Quoc Vuong CE171000", 10, 20);
            g.dispose();
            try {
                ImageIO.write(image, "png", saveFile);

            } catch (IOException e) {
                System.err.println(e);
            }
        }

    }//GEN-LAST:event_mniExportActionPerformed

    private void rbdListActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbdListActionPerformed

        this.p.setGraphType(1);
    }//GEN-LAST:event_rbdListActionPerformed

    private void rdbMatrixActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rdbMatrixActionPerformed

        this.p.setGraphType(0);

    }//GEN-LAST:event_rdbMatrixActionPerformed

    private void mniSaveMatrixActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mniSaveMatrixActionPerformed
        File saveFile = getSaveFile(new FileNameExtensionFilter("Graph data (*.mtx)", "mtx"),
                "graph_" + sdfDate.format(Calendar.getInstance().getTime()) + ".mtx");

        // luu so luong dinh cua do thi
        // luu toa do x y cua cac dinh
        // ma tran trong so
        if (saveFile != null) {
            if (saveFile.getName().endsWith(".mtx")) {
                ArrayList<GVertex> verties = p.getVertices();
                int[][] graph = p.getGraph();
                int numberOfVertex = p.getNumberOfVertices();
                FileWriter fw = null;
                String strData = "";
                String strXY = "";

                for (int i = 0; i < verties.size(); i++) {
                    strXY += "\n" + verties.get(i).getX() + " " + verties.get(i).getY();
                }
                try {
                    strData += numberOfVertex;
                    strData += strXY;
                    for (int i = 0; i < numberOfVertex; i++) {
                        strData += "\n" + graph[i][0];
                        for (int j = 1; j < numberOfVertex; j++) {
                            strData += " " + graph[i][j];
                        }

                    }
                    fw = new FileWriter(saveFile);
                    fw.write(strData);
                    fw.flush();
                    fw.close();

                } catch (IOException e) {
                    System.err.println(e);
                } finally {
                    try {
                        fw.close();
                    } catch (Exception e) {
                        System.err.println(e);
                    }
                }
            }
        }
    }//GEN-LAST:event_mniSaveMatrixActionPerformed

    private void mniSaveListActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mniSaveListActionPerformed
        File saveFile = getSaveFile(new FileNameExtensionFilter("Graph data (*.lst)", "lst"),
                "graph_" + sdfDate.format(Calendar.getInstance().getTime()) + ".lst");

        // luu so luong dinh cua do thi
        // luu toa do x y cua cac dinh
        // ma tran trong so
        if (saveFile != null) {
            if (saveFile.getName().endsWith(".lst")) {
                ArrayList<GVertex> verties = p.getVertices();
                int[][] graph = p.getGraph();
                int numberOfVertex = p.getNumberOfVertices();
                FileWriter fw = null;
                String strData = "";
                String strXY = "";

                for (int i = 0; i < verties.size(); i++) {
                    strXY += "\n" + verties.get(i).getX() + " " + verties.get(i).getY();
                }
                try {
                    int countEdge = 0;
                    for (int i = 0; i < numberOfVertex - 1; i++) {

                        for (int j = i+ 1; j < numberOfVertex; j++) {
                            if (graph[i][j] > 0) {
                                strData += "\n" + i + " " + j + " " + graph[i][j];
                                countEdge++;
                            }
                        }
                    }
                    strData = numberOfVertex + " " + countEdge + strXY + strData;
                    fw = new FileWriter(saveFile);
                    fw.write(strData);
                    fw.flush();
                    fw.close();

                } catch (IOException e) {
                    System.err.println(e);
                } finally {
                    try {
                        fw.close();
                    } catch (Exception e) {
                        System.err.println(e);
                    }
                }
            }
        }
    }//GEN-LAST:event_mniSaveListActionPerformed

    private void mniFindShortestPathActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mniFindShortestPathActionPerformed
        // TODO add your handling code here:
        p.Dijkstra();
    }//GEN-LAST:event_mniFindShortestPathActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Undirected_Graph.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Undirected_Graph.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Undirected_Graph.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Undirected_Graph.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Undirected_Graph().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup btgGraphType;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JPopupMenu.Separator jSeparator1;
    private javax.swing.JLabel lblGuideLine;
    private javax.swing.JMenuItem mniBFS;
    private javax.swing.JMenuItem mniClear;
    private javax.swing.JMenuItem mniDFS;
    private javax.swing.JMenuItem mniExit;
    private javax.swing.JMenuItem mniExport;
    private javax.swing.JMenuItem mniFindShortestPath;
    private javax.swing.JMenuItem mniMinimumSpanningTree;
    private javax.swing.JMenuItem mniOpen;
    private javax.swing.JMenuItem mniSaveList;
    private javax.swing.JMenuItem mniSaveMatrix;
    private javax.swing.JMenu mnuAlgorithm;
    private javax.swing.JMenu mnuFile;
    private javax.swing.JMenu mnuGraph;
    private javax.swing.JMenuBar mnuMain;
    private javax.swing.JMenu mnuSaveAs;
    private javax.swing.JMenu mnuTraversing;
    private javax.swing.JPanel pnlGraphInfo;
    private javax.swing.JPanel pnlPaper;
    private javax.swing.JRadioButton rbdList;
    private javax.swing.JRadioButton rdbMatrix;
    private javax.swing.JTextArea txtGraphInfo;
    // End of variables declaration//GEN-END:variables
}
